name: CI

on:
  push:
  pull_request:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-15 llvm-15

      - name: Setup LLVM tools
        run: |
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 1000
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 1000

      - name: Install xmake
        run: |
          curl -fsSL https://xmake.io/shget.text | bash
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Configure xmake
        run: |
          xmake config --toolchain=clang --mode=debug --yes

      - name: Build (Debug)
        run: |
          xmake build

      - name: Run tests (Debug)
        run: |
          xmake test

      - name: Configure xmake (Release)
        run: |
          xmake config --toolchain=clang --mode=release

      - name: Build (Release)
        run: |
          xmake build

      - name: Run tests (Release)
        run: |
          xmake test

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-15 llvm-15 llvm-15-tools bc

      - name: Setup LLVM tools
        run: |
          sudo update-alternatives --install /usr/bin/llvm-profdata llvm-profdata /usr/bin/llvm-profdata-15 1000
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-15 1000
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 1000
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 1000

      - name: Install xmake
        run: |
          curl -fsSL https://xmake.io/shget.text | bash
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Configure xmake
        run: |
          xmake config --toolchain=clang --mode=coverage --yes

      - name: Run coverage
        run: |
          xmake coverage
          
          # Verify coverage files were generated
          if [ ! -f "coverage/summary.txt" ]; then
            echo "Error: coverage/summary.txt not found"
            exit 1
          fi
          
          if [ ! -f "coverage/index.html" ]; then
            echo "Error: coverage/index.html not found"
            exit 1
          fi
          
          echo "Coverage files generated successfully"

      - name: Parse coverage and generate badge
        run: |
          COVERAGE=$(grep "^TOTAL" coverage/summary.txt | awk '{print $10}' | sed 's/\([0-9.]*\)%.*/\1/')
          echo "Coverage: ${COVERAGE}%"

          if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi

          BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}"
          curl -o coverage.svg "$BADGE_URL"
          echo "Generated badge: $BADGE_URL"

      - name: Upload coverage directory
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 90

      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage.svg
          compression: 0
          retention-days: 90

  clang-format:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format-15

      - name: Check formatting
        run: |
          find . -name '*.cpp' -o -name '*.h' | grep -v build | grep -v googletest | grep -v _deps | xargs clang-format-15 --dry-run --Werror
